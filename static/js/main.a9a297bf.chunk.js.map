{"version":3,"sources":["components/Timer.js","container/App.js","reportWebVitals.js","index.js"],"names":["Timer","timeLeft","setTimeLeft","useState","isWorkSession","setIsWorkSession","isActive","setIsActive","showNotification","title","body","Notification","permission","useEffect","requestPermission","timer","setInterval","prevTime","clearInterval","React","createElement","className","onClick","startBreakSession","startWorkSession","time","seconds","Math","floor","formatTime","toggleTimer","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0LAwHeA,MAtHf,WACI,MAGOC,EAAUC,GAAeC,mBAHd,OAIXC,EAAeC,GAAoBF,oBAAS,IAC5CG,EAAUC,GAAeJ,oBAAS,GAUnCK,EAAmBA,CAACC,EAAOC,KACG,YAA5BC,aAAaC,YACb,IAAID,aAAaF,EAAO,CAAEC,UA6DlC,OAxDAG,oBAAU,KAb0B,YAA5BF,aAAaC,YACbD,aAAaG,oBAejB,IAAIC,EAAQ,KAiBZ,OAfIT,GAAYL,EAAW,EAEvBc,EAAQC,YAAY,KAChBd,EAAae,GAAaA,EAAW,IACtC,KACiB,IAAbhB,IAEPiB,cAAcH,GACVX,EACAI,EAAiB,oBAAqB,gDAEtCA,EAAiB,qBAAsB,oDAIxC,IAAMU,cAAcH,IAC5B,CAACT,EAAUL,EAAUG,IAoCpBe,IAAAC,cAAA,OAAKC,UAAU,qDAIXF,IAAAC,cAAA,UACIC,UAAU,0DACVC,QA3BcC,KACtBhB,GAAY,GACZL,EA3De,KA4DfG,GAAiB,KAyBZ,uBAIDc,IAAAC,cAAA,UACIC,UAAU,0DACVC,QA3BaE,KACrBjB,GAAY,GACZL,EAnEc,MAoEdG,GAAiB,KAyBZ,sBAIDc,IAAAC,cAAA,MAAIC,UAAU,UACTjB,EAAgB,eAAiB,iBAGtCe,IAAAC,cAAA,MAAIC,UAAU,UA7BFI,KAChB,MACMC,EAAUD,EAAO,GACvB,SAFgBE,KAAKC,MAAMH,EAAO,OAEbC,EAAU,GAAK,IAAMA,EAAUA,KA0BxBG,CAAW5B,IAEnCkB,IAAAC,cAAA,UACIC,UAAU,oDACVC,QA3DQQ,KAChBvB,GAAaD,KA4DJA,EAAW,QAAU,WC3FvByB,MAdf,WAGE,OACEZ,IAAAC,cAAA,OAAKC,UAAU,8DACbF,IAAAC,cAAA,MAAIC,UAAU,gBAAe,kBAE5BF,IAAAC,cAACpB,EAAK,QCAEgC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,YCCDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH9B,IAAAC,cAACD,IAAM+B,WAAU,KACf/B,IAAAC,cAACW,EAAG,QAORC","file":"static/js/main.a9a297bf.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Timer() {\r\n    const WORK_TIME = 25 * 60; // 25 minutes in seconds\r\n    const BREAK_TIME = 5 * 60; // 5 minutes in seconds\r\n\r\n    const [timeLeft, setTimeLeft] = useState(WORK_TIME); // Initial time set to work time\r\n    const [isWorkSession, setIsWorkSession] = useState(true); // Determines if it's a work or break session\r\n    const [isActive, setIsActive] = useState(false); // Is the timer running?\r\n\r\n    // Request notification permission\r\n    const requestNotificationPermission = () => {\r\n        if (Notification.permission !== \"granted\") {\r\n            Notification.requestPermission();\r\n        }\r\n    };\r\n\r\n    // Show notification\r\n    const showNotification = (title, body) => {\r\n        if (Notification.permission === \"granted\") {\r\n            new Notification(title, { body });\r\n        }\r\n    };\r\n\r\n    // useEffect for handling the timer logic\r\n    useEffect(() => {\r\n        requestNotificationPermission(); // Request permission on component mount\r\n\r\n        let timer = null;\r\n\r\n        if (isActive && timeLeft > 0) {\r\n            // Decrease the time left every second\r\n            timer = setInterval(() => {\r\n                setTimeLeft((prevTime) => prevTime - 1);\r\n            }, 1000);\r\n        } else if (timeLeft === 0) {\r\n            // When time hits 0, show notification\r\n            clearInterval(timer);\r\n            if (isWorkSession) {\r\n                showNotification(\"Work Session Done\", \"Click 'Start Break Session' to take a break.\");\r\n            } else {\r\n                showNotification(\"Break Session Done\", \"Click 'Start Work Session' to get back to work.\");\r\n            }\r\n        }\r\n\r\n        return () => clearInterval(timer); // Cleanup timer on unmount or state change\r\n    }, [isActive, timeLeft, isWorkSession]);\r\n\r\n    // Start or pause the timer\r\n    const toggleTimer = () => {\r\n        setIsActive(!isActive);\r\n    };\r\n\r\n    // Reset the timer to work session\r\n    const resetWorkSession = () => {\r\n        setIsActive(false);\r\n        setTimeLeft(WORK_TIME);\r\n        setIsWorkSession(true); // Always start with work session\r\n    };\r\n\r\n    // Start the break session\r\n    const startBreakSession = () => {\r\n        setIsActive(false);\r\n        setTimeLeft(BREAK_TIME);\r\n        setIsWorkSession(false); // Set to break session\r\n    };\r\n\r\n    // Start the work session\r\n    const startWorkSession = () => {\r\n        setIsActive(false);\r\n        setTimeLeft(WORK_TIME);\r\n        setIsWorkSession(true); // Set to work session\r\n    };\r\n\r\n    // Format the time from seconds to MM:SS format\r\n    const formatTime = (time) => {\r\n        const minutes = Math.floor(time / 60);\r\n        const seconds = time % 60;\r\n        return `${minutes}:${seconds < 10 ? \"0\" + seconds : seconds}`;\r\n    };\r\n\r\n    return (\r\n        <div className=\"tc bg-light-gray br3 pa4 ma3 w-50 center shadow-5\">\r\n\r\n\r\n\r\n            <button\r\n                className=\"f6 link dim br3 ph3 pv2 mb2 dib white bg-light-blue ml3\"\r\n                onClick={startBreakSession}\r\n            >\r\n                Start Break Session\r\n            </button>\r\n\r\n            <button\r\n                className=\"f6 link dim br3 ph3 pv2 mb2 dib white bg-dark-green ml3\"\r\n                onClick={startWorkSession}\r\n            >\r\n                Start Work Session\r\n            </button>\r\n\r\n            <h1 className=\"f3 mb3\">\r\n                {isWorkSession ? \"Work Session\" : \"Break Session\"}\r\n            </h1>\r\n\r\n            <h2 className=\"f1 mb4\">{formatTime(timeLeft)}</h2>\r\n\r\n            <button\r\n                className=\"f6 link dim br3 ph3 pv2 mb2 dib white bg-dark-red\"\r\n                onClick={toggleTimer}\r\n            >\r\n                {isActive ? \"Pause\" : \"Start\"}\r\n            </button>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;\r\n","import './App.css';\nimport Timer from '../components/Timer'\nimport React from 'react';\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App bg-dark-gray pa4 vh-100 flex flex-column items-center \">\n      <h2 className=\"f2 white mb2\">Pomodoro Timer</h2>   \n     \n       <Timer  />\n    </div> \n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './container/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}